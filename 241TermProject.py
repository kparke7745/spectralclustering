import random
import math
import numpy
from scipy.spatial.distance import cdist

def cluster(data,k):
    data = numpy.asarray(data)
    norm = numpy.linalg.norm(data)
    normData = data/norm
    eucDists = cdist(normData,normData)
    
    threshold = numpy.median(eucDists)
    for v in eucDists:
        numpy.where(v>threshold,0,v)
    
    d = []
    for v in eucDists:
        d.append(numpy.sum(v))
    
    D = numpy.diag(d)
    
    L = D - eucDists
    
    evals,evects = numpy.absolute(numpy.linalg.eig(L)[0]),numpy.matrix.transpose(numpy.linalg.eig(L)[1])
    V = zip(evals,evects)
    V = sorted(V,key=lambda x: x[0])
    
    U = []
    for i in range(k):
        U.append(V[i][1])
    
    centroids =  []
    for i in range(k):
        centroids.append((i,numpy.random.choice(U[random.randint(0,len(U)-1)])))
    
    C = []
    for point in data:
        min = 100 #arbitrarily large value for setting first min
        for c in centroids:
            distance = math.sqrt(sum([(x-y)**2 for x,y in zip(point,c)]))
            if distance < min:
                min = distance
                assigned = c
        C.append((assigned[0],point))
                
    change = True
    while change:
        change = False
        for c in centroids:
            S =[]
            for p in C:
                if p[0] == c[0]:
                    S.append(p[1])
            if len(S) == 0:
                c = random.choice(centroids)
            else:
                clustCount = len(S)
                c = (1/clustCount)*sum(S)
        newC = []
        for point in data:
            min = 100
            for c in centroids:
                distance = math.sqrt(sum([(x-y)**2 for x,y in zip(point,c)]))
                if distance < min:
                    min = distance
                    assigned = c
            newC.append((assigned[0],point))
        
        for p in range(len(newC)):
            if newC[p][0] - C[p][0] == 0:
                continue
            else:
                change = True
                C = newC
                break
        if change == False:
            C = newC
            
    A = []
    for p in C:
        A.append(p[0])
        
    return A
    
input_data = [[4.004978178687801, -2.601908322931573, -0.7796586613200545], [4.864334462672794, -2.492583845382608, 0.6217468339686765], [3.7734463965909546, 3.0756043214748767, -0.9415711020101369], [-1.9238454530189335, 5.237910440550934, 3.4692522373763817], [-3.9311373052371854, 4.403177957932997, 2.8746312311202793], [-2.6944212376916896, 3.2061210538531864, 3.0651296676250253], [5.529110864834428, -2.737208879737156, 0.6144719768745575], [-3.1515797799395746, 4.093624404351516, 3.0939241566219327], [-2.16403321008516, 4.731550534020183, 2.4769133704031416], [3.0439733516375003, -3.579234166891281, -0.24525310775385623], [-1.8461812576708985, 4.7441840445735926, 3.5748637583850553], [3.305530639020322, 2.1409576426980843, -2.197977641854963], [4.146277378924486, -3.765727710873221, -0.6161836712926008], [-1.7847363031574117, 3.7391228030969543, 4.623707848461306], [-2.9530286005302604, 5.229885644786761, 3.8312995538320376], [4.569657193338344, -3.6447441326321464, 0.2573452302955248], [1.109330271386658, 2.4972818667807006, -2.9673516331155216], [3.705943578564711, 3.42232363200658, -2.8123012742448674], [-3.458720828180583, 5.506212868644983, 2.809102795665514], [3.040143760046462, 2.842215322039344, -2.380792492609344], [-2.4918996527474393, 3.620453702725883, 2.31389731469609], [1.1577574552386976, 2.0091953058421366, -0.7774733331291146], [5.4594611403529125, -3.361385215645504, 0.053436065838339486], [4.596867784870414, -2.040970253267458, -0.4315153598921657], [4.089993333848459, -2.286548825002279, -0.6902232108742521], [1.5712041824192293, 3.12179648619343, -2.5981546032282763], [-3.65118896047347, 5.3478028642064395, 3.17046086939959], [4.330075577202794, -2.831682053510021, 0.6422235683723676], [3.412121278511384, 2.6618684855949706, -0.6618329821786828], [-2.6506265328869745, 4.496760394496776, 4.280365687790843], [-1.9808591089631022, 3.9941597410789194, 2.7164179662714507], [5.9324578892142865, -3.1745680530483407, -0.5940982637616423], [2.4442275141582828, 3.2734141968168915, -2.9063183422908363], [5.088237038024149, -3.5652070231326474, 0.7164531184648038], [2.0455644135495152, 2.1559006002219636, -1.7085307774441143], [2.218606258563473, 3.29078976429678, -2.4162117693044625], [4.557334972663284, -3.3557465013398238, -0.8654969447255463], [-1.5037327113660766, 5.970363763271742, 4.685037403335516], [4.85135061816802, -2.1522457118470717, -0.5686741864011766], [4.61134040463522, 2.0900546497804005, -1.2914907985724138]]

k=6

print(cluster(input_data,k))
        
    
    